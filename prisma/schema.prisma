generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @map("_id")
  name      String     @default("Anonymous") // Default name
  birthdate DateTime   @default("1900-01-01T00:00:00.000Z") // Default to January 1, 1900
  education String     @default("Not specified") // Default education
  path      String[]   @default([]) // Default to an empty array
  UserData  UserData[] // No default needed for relations
  complete  Boolean    @default(false) // Default to false
}

// model Profile {
//   id          String @id @default(auto()) @map("_id") @db.ObjectId
//   profileName String
//   userId      String
//   user        User   @relation("UserProfiles", fields: [userId], references: [id])
//   basicScore  Int    @default(0)

//   @@unique([userId, profileName]) // Composite unique constraint
// }

model UserData {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  qna          Json
  user         User               @relation(fields: [userId], references: [id])
  resume       String
  complete     Boolean            @default(false)
  role         String             @default("Software")
  email        String             @default("dushayntbha012@gmail.com")
  jobListings  Joblisting[]
  applications UserApplications[]
}

model Recruiter {
  id           String       @id @default(uuid()) @map("_id")
  name         String       @default("Anonymous") // Default name
  companyName  String       @default("Company")
  aboutCompany String
  organization String
  jobListings  Joblisting[] @relation("RecruiterJobListings") // Job listings associated with recruiter
}

model Joblisting {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  recruiterId      String
  recruiter        Recruiter          @relation(fields: [recruiterId], references: [id], name: "RecruiterJobListings")
  description      String
  responsibilities String
  requirements     String
  experience       String
  location         String
  jobType          String // intern, full-time, etc.
  mode             String // remote, on-site, hybrid
  organization     String // Add this field to store the organization type (gov/private)
  title            String
  salary           String
  createdAt        DateTime           @default(now())
  jobPath          String //Software, Marketing, Business
  UserData         UserData?          @relation(fields: [userDataId], references: [id])
  userDataId       String?            @db.ObjectId
  applicants       UserApplications[]
}

model UserApplications {
  id          String   @id @default(uuid()) @map("_id")
  userDataId  String @db.ObjectId
  joblistingId String @db.ObjectId

  userData   UserData   @relation(fields: [userDataId], references: [id])
  joblisting Joblisting @relation(fields: [joblistingId], references: [id])
}

model Mentor {
  id             String     @id @default(uuid()) @map("_id")
  userId         String     @unique
  name           String     @default("Anonymous") // Default name
  designation    String
  aboutMentor    String
  qualifications String
  experience     String
  email          String
  skills         String
  schedule       Meetings[]
  totalMeetings  Int @default(0)
  acceptedMeetings Int @default(0)
  deniedMeetings Int @default(0)
}

model Meetings {
  id         String   @id @default(uuid()) @map("_id")
  mentorName String
  mentorId   String
  mentor     Mentor   @relation(fields: [mentorId], references: [id])
  dateTime   DateTime
  purpose    String
  duration   String
  details    String
  accepted   String @default("In Progress")
}
